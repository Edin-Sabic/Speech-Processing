# This script creates a function which generates many features in a tabular form for speech processing and feature generation. 
# The free program Praat is called which is used for speech analysis in phonetics. The features can later
# be pruned through feature importance analysis. The function was used for supervised classification tasks and includes
# a target label argument which appends a label to the end of each row of data.

import parselmouth
import glob
import os.path
import librosa
import numpy as np
from parselmouth.praat import call
import pandas as pd

minimum_pitch = 75
maximum_pitch = 600
hop_length = 512 # 43 ms

results = pd.DataFrame(np.empty(0))

def get_speech_features(wave_file, results, target_label):
    
    # wave_file = audio wav clip
    # final_result_array = dataframe to save to
    # target label = label to append to dataframe 
    
    results = pd.DataFrame(np.empty(0))
    s = parselmouth.Sound(wave_file)        
    get_Power = call(s, "Get power...", 0.0, 0.0)
    hnr = call(s, "Get mean", 0, 0)
    pointProcess = call(s, "To PointProcess (periodic, cc)", minimum_pitch, maximum_pitch)
    Jitter_local = call(pointProcess, "Get jitter (local)...", 0, 0, .0001, .02, 1.3)
    Jitter_rap = call(pointProcess, "Get jitter (rap)...", 0, 0, .0001, .02, 1.3)
    Jitter_ppq5 = call(pointProcess, "Get jitter (ppq5)...", 0, 0, .0001, .02, 1.3)
    Jitter_ddp = call(pointProcess, "Get jitter (ddp)...", 0, 0, .0001, .02, 1.3)
    num_periods = call(pointProcess, "Get number of periods...", 0, 0, .0001, .02, 1.3)
    mean_period = call(pointProcess, "Get mean period...", 0, 0, .0001, .02, 1.3)
    stdev_period = call(pointProcess, "Get stdev period...", 0, 0, .0001, .02, 1.3)
    pitch = call(s, "To Pitch...", 0.0, minimum_pitch, maximum_pitch)
    meanF0 = call(pitch, "Get mean...", 0, 0, "Hertz") # double-check if this is how fundamental frequency is derived...
    stdevF0 = call(pitch, "Get standard deviation...", 0 ,0, "Hertz")        
    localShimmer =  call([s, pointProcess], "Get shimmer (local)...", 0, 0, 0.0001, 0.02, 1.3, 1.6)
    localdbShimmer = call([s, pointProcess], "Get shimmer (local_dB)...", 0, 0, 0.0001, 0.02, 1.3, 1.6)
    apq3Shimmer = call([s, pointProcess], "Get shimmer (apq3)...", 0, 0, 0.0001, 0.02, 1.3, 1.6)
    aqpq5Shimmer = call([s, pointProcess], "Get shimmer (apq5)...", 0, 0, 0.0001, 0.02, 1.3, 1.6)
    apq11Shimmer =  call([s, pointProcess], "Get shimmer (apq11)...", 0, 0, 0.0001, 0.02, 1.3, 1.6)
    ddaShimmer = call([s, pointProcess], "Get shimmer (dda)...", 0, 0, 0.0001, 0.02, 1.3, 1.6)
        
    filename = wave_file
    y, sr = librosa.load(filename) # can change sample rate here, do I have to load twice?        
    y_harmonic, y_percussive = librosa.effects.hpss(y)
    mfcc = librosa.feature.mfcc(y=y, sr=sr, hop_length = hop_length, n_mfcc = 12)
    mfcc_delta = librosa.feature.delta(mfcc)
    zc_rate = librosa.feature.zero_crossing_rate(y)
    S, phase = librosa.magphase(librosa.stft(y))
    spectral_roll_off = librosa.feature.spectral_rolloff(S = S, sr = sr)
    onset_env = librosa.onset.onset_strength(y = y, sr = sr)

    pitches, magnitudes = librosa.piptrack(y = y, sr = sr)
    rms_audio = librosa.feature.rms(y) 
    mean_rms_audio = np.mean(rms_audio)
    stdev_rms_audio = np.std(rms_audio)
    max_rms_audio = np.amax(rms_audio)
    min_rms_audio = np.amin(rms_audio)
    range_rms = max_rms_audio - min_rms_audio
    lpc = librosa.core.lpc(y, 12)  
        
    results = pd.DataFrame([get_Power, hnr, Jitter_local, Jitter_rap, Jitter_ppq5, Jitter_ddp, num_periods, mean_period,\
                   stdev_period, meanF0, stdevF0, localShimmer, localdbShimmer, apq3Shimmer, aqpq5Shimmer, apq11Shimmer,\
                   ddaShimmer, np.mean(mfcc[0,:]), np.mean(mfcc[1,:]), np.mean(mfcc[2,:]), np.mean(mfcc[3,:]), \
                   np.mean(mfcc[4,:]), np.mean(mfcc[5,:]), np.mean(mfcc[6,:]), np.mean(mfcc[7,:]), \
                   np.mean(mfcc[8,:]), np.mean(mfcc[9,:]), np.mean(mfcc[10,:]), np.mean(mfcc[11,:]), \
                   np.mean(mfcc_delta[0,:]),np.mean(mfcc_delta[1,:]),np.mean(mfcc_delta[2,:]),np.mean(mfcc_delta[3,:]),\
                   np.mean(mfcc_delta[4,:]),np.mean(mfcc_delta[5,:]),np.mean(mfcc_delta[6,:]),np.mean(mfcc_delta[7,:]),\
                   np.mean(mfcc_delta[8,:]),np.mean(mfcc_delta[9,:]),np.mean(mfcc_delta[10,:]),np.mean(mfcc_delta[11,:]),\
                   np.mean(mfcc_delta[:,5]), np.mean(mfcc_delta[:,10]),\
                   np.std(mfcc[4,:]), np.std(mfcc[5,:]), np.std(mfcc[6,:]), np.std(mfcc[7,:]), \
                   np.std(mfcc[8,:]), np.std(mfcc[9,:]), np.std(mfcc[10,:]), np.std(mfcc[11,:]), \
                   np.mean(zc_rate), np.std(zc_rate), np.mean(spectral_roll_off), np.std(spectral_roll_off), np.mean(onset_env), \
                   np.std(onset_env), np.std(pitches), np.std(magnitudes), np.mean(magnitudes), mean_rms_audio, \
                   stdev_rms_audio, max_rms_audio, min_rms_audio, range_rms, lpc[1], lpc[2], lpc[3], lpc[4], lpc[5], lpc[6], lpc[7], lpc[8],\
                   lpc[9], lpc[10], lpc[11], target_label]).T
        
    results.columns = ['Power','hnr','Jitter_loc','Jitter_rap','Jitter_ppq5','Jitter_ddp','num_periods','mean_period',\
                       'stdev_period','meanF0','stdevF0','localShimmer','localdbShimmer','apq3Shimmer','aqpq5Shimmer','apq11Shimmer',\
                       'ddaShimmer','mean_mfcc_0','mean_mfcc_1','mean_mfcc_2','mean_mfcc_3',\
                       'mean_mfcc_4','mean_mfcc_5','mean_mfcc_6','mean_mfcc_7',\
                       'mean_mfcc_8','mean_mfcc_9','mean_mfcc_10','mean_mfcc_11',\
                       'mean_mfcc_delta_0','mean_mfcc_delta_1','mean_mfcc_delta_2','mean_mfcc_delta_3','mean_mfcc_delta_4',\
                       'mean_mfcc_delta_5','mean_mfcc_delta_6','mean_mfcc_delta_7',\
                       'mean_mfcc_delta_8','mean_mfcc_delta_9','mean_mfcc_delta_10','mean_mfcc_delta_11',\
                       'mean_mfcc_delta_5_col','mean_mfcc_delta_10_col',\
                       'stdev_mfcc_4','stdev_mfcc_5','stdev_mfcc_6','stdev_mfcc_7',\
                       'stdev_mfcc_8','stdev_mfcc_9','stdev_mfcc_10','stdev_mfcc_11',\
                       'mean_zc','stdev_zc','mean_spectral_roll_off','stdev_spectral_roll_off','mean_onset_env',\
                       'stdev_onset_env','stdev_pitches','stdev_magnitudes','mean_magnitudes','mean_rms_audio',\
                       'stdev_rms_audio','max_rms','min_rms','range_rms','lpc1','lpc2','lpc3','lpc4','lpc5','lpc6','lpc7','lpc8',\
                       'lpc9','lpc10','lpc11','y']
  
    return results
